apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-connect
  namespace: debezium
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-connect
  template:
    metadata:
      labels:
        app: kafka-connect
    spec:
      initContainers:
        - name: wait-for-kafka
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for Kafka to be ready..."
              until nc -z kafka 9092; do
                echo "Kafka is not ready yet, waiting..."
                sleep 5
              done
              echo "Kafka is ready!"
              sleep 10
      containers:
        - name: kafka-connect
          image: debezium/connect:2.5
          env:
            # Legacy environment variables (for backward compatibility)
            - name: BOOTSTRAP_SERVERS
              value: "kafka:9092"
            - name: GROUP_ID
              value: "compose-connect-group"
            - name: CONFIG_STORAGE_TOPIC
              value: "docker-connect-configs"
            - name: OFFSET_STORAGE_TOPIC
              value: "docker-connect-offsets"
            - name: STATUS_STORAGE_TOPIC
              value: "docker-connect-status"
            - name: CONFIG_STORAGE_REPLICATION_FACTOR
              value: "1"
            - name: OFFSET_STORAGE_REPLICATION_FACTOR
              value: "1"
            - name: STATUS_STORAGE_REPLICATION_FACTOR
              value: "1"
            # Modern CONNECT_ prefixed variables
            - name: CONNECT_BOOTSTRAP_SERVERS
              value: "kafka:9092"
            - name: CONNECT_REST_ADVERTISED_HOST_NAME
              value: "kafka-connect"
            - name: CONNECT_REST_PORT
              value: "8083"
            - name: CONNECT_GROUP_ID
              value: "compose-connect-group"
            - name: CONNECT_CONFIG_STORAGE_TOPIC
              value: "docker-connect-configs"
            - name: CONNECT_OFFSET_STORAGE_TOPIC
              value: "docker-connect-offsets"
            - name: CONNECT_STATUS_STORAGE_TOPIC
              value: "docker-connect-status"
            - name: CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR
              value: "1"
            - name: CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR
              value: "1"
            - name: CONNECT_STATUS_STORAGE_REPLICATION_FACTOR
              value: "1"
            # Converter settings
            - name: CONNECT_KEY_CONVERTER
              value: "org.apache.kafka.connect.json.JsonConverter"
            - name: CONNECT_VALUE_CONVERTER
              value: "org.apache.kafka.connect.json.JsonConverter"
            - name: CONNECT_INTERNAL_KEY_CONVERTER
              value: "org.apache.kafka.connect.json.JsonConverter"
            - name: CONNECT_INTERNAL_VALUE_CONVERTER
              value: "org.apache.kafka.connect.json.JsonConverter"
            # Remove problematic logging configuration
            - name: CONNECT_LOG4J_ROOT_LOGLEVEL
              value: "INFO"
            # Plugin path for Debezium connectors
            - name: CONNECT_PLUGIN_PATH
              value: "/kafka/connect"
          ports:
            - containerPort: 8083
          readinessProbe:
            httpGet:
              path: /
              port: 8083
            initialDelaySeconds: 45
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /
              port: 8083
            initialDelaySeconds: 90
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-connect
  namespace: debezium
spec:
  selector:
    app: kafka-connect
  ports:
    - port: 8083
      targetPort: 8083
  type: NodePort